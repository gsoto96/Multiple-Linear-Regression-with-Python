{
  "metadata": {
    "language_info": {
      "codemirror_mode": {
        "name": "python",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8"
    },
    "kernelspec": {
      "name": "python",
      "display_name": "Pyolite",
      "language": "python"
    }
  },
  "nbformat_minor": 4,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "markdown",
      "source": "<p style=\"text-align:center\">\n    <a href=\"https://skills.network/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkML0101ENSkillsNetwork1047-2023-01-01\">\n    <img src=\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/assets/logos/SN_web_lightmode.png\" width=\"200\" alt=\"Skills Network Logo\"  />\n    </a>\n</p>\n\n\n# Multiple Linear Regression\n\n\nEstimated time needed: **15** minutes\n    \n\n## Objectives\n\nAfter completing this lab you will be able to:\n\n* Use scikit-learn to implement Multiple Linear Regression\n* Create a model, train it, test it and use the model\n",
      "metadata": {
        "button": false,
        "new_sheet": false,
        "run_control": {
          "read_only": false
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": "<h1>Table of contents</h1>\n\n<div class=\"alert alert-block alert-info\" style=\"margin-top: 20px\">\n    <ol>\n        <li><a href=\"#understanding-data\">Understanding the Data</a></li>\n        <li><a href=\"#reading_data\">Reading the Data in</a></li>\n        <li><a href=\"#multiple_regression_model\">Multiple Regression Model</a></li>\n        <li><a href=\"#prediction\">Prediction</a></li>\n        <li><a href=\"#practice\">Practice</a></li>\n    </ol>\n</div>\n<br>\n<hr>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "### Importing Needed packages\n",
      "metadata": {
        "button": false,
        "new_sheet": false,
        "run_control": {
          "read_only": false
        }
      }
    },
    {
      "cell_type": "code",
      "source": "",
      "metadata": {
        "trusted": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "import piplite\nawait piplite.install(['pandas'])\nawait piplite.install(['matplotlib'])\nawait piplite.install(['numpy'])\nawait piplite.install(['scikit-learn'])\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport pylab as pl\nimport numpy as np\n%matplotlib inline",
      "metadata": {
        "button": false,
        "new_sheet": false,
        "run_control": {
          "read_only": false
        },
        "trusted": true
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "### Downloading Data\nwe will use the link, we will use !wget to download it from IBM Object Storage.\n",
      "metadata": {
        "button": false,
        "new_sheet": false,
        "run_control": {
          "read_only": false
        }
      }
    },
    {
      "cell_type": "code",
      "source": "path='https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-ML0101EN-SkillsNetwork/labs/Module%202/data/FuelConsumptionCo2.csv'",
      "metadata": {
        "button": false,
        "new_sheet": false,
        "run_control": {
          "read_only": false
        },
        "trusted": true
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "from pyodide.http import pyfetch\n\nasync def download(url, filename):\n    response = await pyfetch(url)\n    if response.status == 200:\n        with open(filename, \"wb\") as f:\n            f.write(await response.bytes())",
      "metadata": {
        "trusted": true
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "__Did you know?__ When it comes to Machine Learning, you will likely be working with large datasets. As a business, where can you host your data? IBM is offering a unique opportunity for businesses, with 10 Tb of IBM Cloud Object Storage: [Sign up now for free](http://cocl.us/ML0101EN-IBM-Offer-CC)\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "\n<h2 id=\"understanding_data\">Understanding the Data</h2>\n\n### `FuelConsumption.csv`:\nWe have downloaded a fuel consumption dataset, **`FuelConsumption.csv`**, which contains model-specific fuel consumption ratings and estimated carbon dioxide emissions for new light-duty vehicles for retail sale in Canada. [Dataset source](http://open.canada.ca/data/en/dataset/98f1a129-f628-4ce4-b24d-6f16bf24dd64?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkML0101ENSkillsNetwork1047-2023-01-01)\n\n- **MODELYEAR** e.g. 2014\n- **MAKE** e.g. Acura\n- **MODEL** e.g. ILX\n- **VEHICLE CLASS** e.g. SUV\n- **ENGINE SIZE** e.g. 4.7\n- **CYLINDERS** e.g 6\n- **TRANSMISSION** e.g. A6\n- **FUELTYPE** e.g. z\n- **FUEL CONSUMPTION in CITY(L/100 km)** e.g. 9.9\n- **FUEL CONSUMPTION in HWY (L/100 km)** e.g. 8.9\n- **FUEL CONSUMPTION COMB (L/100 km)** e.g. 9.2\n- **CO2 EMISSIONS (g/km)** e.g. 182   --> low --> 0\n",
      "metadata": {
        "button": false,
        "new_sheet": false,
        "run_control": {
          "read_only": false
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": "<h2 id=\"reading_data\">Reading the data in</h2>\n",
      "metadata": {
        "button": false,
        "new_sheet": false,
        "run_control": {
          "read_only": false
        }
      }
    },
    {
      "cell_type": "code",
      "source": "await download(path, \"FuelConsumption.csv\")\npath=\"FuelConsumption.csv\"",
      "metadata": {
        "trusted": true
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "df = pd.read_csv(path)\n\n# take a look at the dataset\ndf.head()",
      "metadata": {
        "button": false,
        "new_sheet": false,
        "run_control": {
          "read_only": false
        },
        "trusted": true
      },
      "execution_count": 10,
      "outputs": [
        {
          "execution_count": 10,
          "output_type": "execute_result",
          "data": {
            "text/plain": "   MODELYEAR   MAKE       MODEL VEHICLECLASS  ENGINESIZE  CYLINDERS  \\\n0       2014  ACURA         ILX      COMPACT         2.0          4   \n1       2014  ACURA         ILX      COMPACT         2.4          4   \n2       2014  ACURA  ILX HYBRID      COMPACT         1.5          4   \n3       2014  ACURA     MDX 4WD  SUV - SMALL         3.5          6   \n4       2014  ACURA     RDX AWD  SUV - SMALL         3.5          6   \n\n  TRANSMISSION FUELTYPE  FUELCONSUMPTION_CITY  FUELCONSUMPTION_HWY  \\\n0          AS5        Z                   9.9                  6.7   \n1           M6        Z                  11.2                  7.7   \n2          AV7        Z                   6.0                  5.8   \n3          AS6        Z                  12.7                  9.1   \n4          AS6        Z                  12.1                  8.7   \n\n   FUELCONSUMPTION_COMB  FUELCONSUMPTION_COMB_MPG  CO2EMISSIONS  \n0                   8.5                        33           196  \n1                   9.6                        29           221  \n2                   5.9                        48           136  \n3                  11.1                        25           255  \n4                  10.6                        27           244  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MODELYEAR</th>\n      <th>MAKE</th>\n      <th>MODEL</th>\n      <th>VEHICLECLASS</th>\n      <th>ENGINESIZE</th>\n      <th>CYLINDERS</th>\n      <th>TRANSMISSION</th>\n      <th>FUELTYPE</th>\n      <th>FUELCONSUMPTION_CITY</th>\n      <th>FUELCONSUMPTION_HWY</th>\n      <th>FUELCONSUMPTION_COMB</th>\n      <th>FUELCONSUMPTION_COMB_MPG</th>\n      <th>CO2EMISSIONS</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2014</td>\n      <td>ACURA</td>\n      <td>ILX</td>\n      <td>COMPACT</td>\n      <td>2.0</td>\n      <td>4</td>\n      <td>AS5</td>\n      <td>Z</td>\n      <td>9.9</td>\n      <td>6.7</td>\n      <td>8.5</td>\n      <td>33</td>\n      <td>196</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2014</td>\n      <td>ACURA</td>\n      <td>ILX</td>\n      <td>COMPACT</td>\n      <td>2.4</td>\n      <td>4</td>\n      <td>M6</td>\n      <td>Z</td>\n      <td>11.2</td>\n      <td>7.7</td>\n      <td>9.6</td>\n      <td>29</td>\n      <td>221</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2014</td>\n      <td>ACURA</td>\n      <td>ILX HYBRID</td>\n      <td>COMPACT</td>\n      <td>1.5</td>\n      <td>4</td>\n      <td>AV7</td>\n      <td>Z</td>\n      <td>6.0</td>\n      <td>5.8</td>\n      <td>5.9</td>\n      <td>48</td>\n      <td>136</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2014</td>\n      <td>ACURA</td>\n      <td>MDX 4WD</td>\n      <td>SUV - SMALL</td>\n      <td>3.5</td>\n      <td>6</td>\n      <td>AS6</td>\n      <td>Z</td>\n      <td>12.7</td>\n      <td>9.1</td>\n      <td>11.1</td>\n      <td>25</td>\n      <td>255</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2014</td>\n      <td>ACURA</td>\n      <td>RDX AWD</td>\n      <td>SUV - SMALL</td>\n      <td>3.5</td>\n      <td>6</td>\n      <td>AS6</td>\n      <td>Z</td>\n      <td>12.1</td>\n      <td>8.7</td>\n      <td>10.6</td>\n      <td>27</td>\n      <td>244</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "Let's select some features that we want to use for regression.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "cdf = df[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_CITY','FUELCONSUMPTION_HWY','FUELCONSUMPTION_COMB','CO2EMISSIONS']]\ncdf.head(9)",
      "metadata": {
        "button": false,
        "new_sheet": false,
        "run_control": {
          "read_only": false
        },
        "trusted": true
      },
      "execution_count": 11,
      "outputs": [
        {
          "execution_count": 11,
          "output_type": "execute_result",
          "data": {
            "text/plain": "   ENGINESIZE  CYLINDERS  FUELCONSUMPTION_CITY  FUELCONSUMPTION_HWY  \\\n0         2.0          4                   9.9                  6.7   \n1         2.4          4                  11.2                  7.7   \n2         1.5          4                   6.0                  5.8   \n3         3.5          6                  12.7                  9.1   \n4         3.5          6                  12.1                  8.7   \n5         3.5          6                  11.9                  7.7   \n6         3.5          6                  11.8                  8.1   \n7         3.7          6                  12.8                  9.0   \n8         3.7          6                  13.4                  9.5   \n\n   FUELCONSUMPTION_COMB  CO2EMISSIONS  \n0                   8.5           196  \n1                   9.6           221  \n2                   5.9           136  \n3                  11.1           255  \n4                  10.6           244  \n5                  10.0           230  \n6                  10.1           232  \n7                  11.1           255  \n8                  11.6           267  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ENGINESIZE</th>\n      <th>CYLINDERS</th>\n      <th>FUELCONSUMPTION_CITY</th>\n      <th>FUELCONSUMPTION_HWY</th>\n      <th>FUELCONSUMPTION_COMB</th>\n      <th>CO2EMISSIONS</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2.0</td>\n      <td>4</td>\n      <td>9.9</td>\n      <td>6.7</td>\n      <td>8.5</td>\n      <td>196</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2.4</td>\n      <td>4</td>\n      <td>11.2</td>\n      <td>7.7</td>\n      <td>9.6</td>\n      <td>221</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1.5</td>\n      <td>4</td>\n      <td>6.0</td>\n      <td>5.8</td>\n      <td>5.9</td>\n      <td>136</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3.5</td>\n      <td>6</td>\n      <td>12.7</td>\n      <td>9.1</td>\n      <td>11.1</td>\n      <td>255</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3.5</td>\n      <td>6</td>\n      <td>12.1</td>\n      <td>8.7</td>\n      <td>10.6</td>\n      <td>244</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>3.5</td>\n      <td>6</td>\n      <td>11.9</td>\n      <td>7.7</td>\n      <td>10.0</td>\n      <td>230</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>3.5</td>\n      <td>6</td>\n      <td>11.8</td>\n      <td>8.1</td>\n      <td>10.1</td>\n      <td>232</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>3.7</td>\n      <td>6</td>\n      <td>12.8</td>\n      <td>9.0</td>\n      <td>11.1</td>\n      <td>255</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>3.7</td>\n      <td>6</td>\n      <td>13.4</td>\n      <td>9.5</td>\n      <td>11.6</td>\n      <td>267</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "Let's plot Emission values with respect to Engine size:\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "plt.scatter(cdf.ENGINESIZE, cdf.CO2EMISSIONS,  color='blue')\nplt.xlabel(\"Engine size\")\nplt.ylabel(\"Emission\")\nplt.show()",
      "metadata": {
        "button": false,
        "new_sheet": false,
        "run_control": {
          "read_only": false
        },
        "scrolled": true,
        "trusted": true
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<pyolite.display.Image at 0x4202970>",
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAoAAAAHgCAYAAAA10dzkAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/YYfK9AAAACXBIWXMAAA9hAAAPYQGoP6dpAAB2eElEQVR4nO3de3hU1bk/8O9kICFAEkiEhJgEwkVABA8ghYAoChWol6QJx4K2hcrvsUpAEpRUtGppUSi0BLwAtnoAL4FTNILaU29IKMpFhCKglUIa5Zpo0SQESIKT/ftjuSczkz0za8/sue7v53nmGTLzzt57Jmnnda31vsuiKIoCIiIiIjKNmFBfABEREREFFxNAIiIiIpNhAkhERERkMkwAiYiIiEyGCSARERGRyTABJCIiIjIZJoBEREREJsMEkIiIiMhkmAASERERmQwTQCIiIiKTYQJIREREZDJMAImIiIhMhgkgERERkckwASQiIiIyGSaARERERCbDBJCIiIjIZJgAEhEREZkME0AiIiIik2ECSERERGQyTACJiIiITIYJIBEREZHJMAEkIiIiMhkmgEREREQmwwSQiIiIyGSYABIRERGZDBNAIiIiIpNhAkhERERkMkwAiYiIiEyGCSARERGRyTABJCIiIjIZJoBEREREJsMEkIiIiMhkmAASERERmQwTQCIiIiKTYQJIREREZDJMAImIiIhMhgkgERERkckwASQiIiIyGSaARERERCbDBJCIiIjIZJgAEhEREZkME0AiIiIik2ECSERERGQyTACJiIiITIYJIBEREZHJMAEkIiIiMhkmgEREREQmwwSQiIiIyGSYABIRERGZDBNAIiIiIpNhAkhERERkMkwAiYiIiEyGCSARERGRyTABJCIiIjIZJoBEREREJsMEkIiIiMhk2oX6AiJZS0sLTp8+jYSEBFgsllBfDhEREUlQFAXnzp1Deno6YmLMORbGBNAPp0+fRmZmZqgvg4iIiHxw4sQJZGRkhPoyQiIiE8Df/OY3WLhwodNj/fv3x+effw5AZPaPPfYY/vznP6O2thZjxozB6tWr0a9fP3t8Y2Mj7r//fmzcuBFNTU2YOHEiVq1ahdTUVOnrSEhIACD+gBITEw14Z0RERBRo9fX1yMzMtH+Pm1FEJoAAMGjQILz33nv2n9u1a30rS5cuxZNPPon169cjOzsbjzzyCCZOnIjPPvsMHTp0AAAUFxfjr3/9KzZt2oSkpCTMnj0b+fn5+PDDD6WvQZ32TUxMZAJIREQUYcy8fCtiE8B27dohLS2tzeOKomDFihX49a9/jdzcXADACy+8gNTUVGzevBlTp05FXV0dnn/+eZSVleHGG28EAKxduxYDBw7E7t27MWrUqKC+FyIiIqJgitiVj0ePHkV6ejp69+6NO++8E8ePHwcAVFVVobq6GhMmTLDHJiUlYeTIkdi1axcAYN++fbh06ZJTzIABA5CVlWWPISIiIopWETkCOHLkSKxbtw79+/fHmTNnsHDhQowdOxaHDx9GdXU1ALRZy5eammp/rrq6GrGxsejSpYvbGC1NTU1oamqy/1xfX2/QOyIiIiIKnohMACdPnmz/95AhQzBy5Ej07NkTf/nLXzBw4MCAnXfx4sVtik+IiIiIIk3ETgE76tKlC6644gocO3bMvi6wpqbGKaampsb+XFpaGpqbm1FbW+s2RsuCBQtQV1dnv504ccLYN0JEREQUBFGRADY0NKCyshI9evRAdnY20tLSsHXrVvvz9fX12LNnD3JycgAAw4cPR/v27Z1ijhw5guPHj9tjtMTFxdkrfln5S0RERJEqIqeAH3jgAdx6663o2bMnTp8+jcceewxWqxXTpk2DxWJBUVERFi1ahH79+tnbwKSnpyMvLw+AKAqZOXMm5s2bh+TkZCQmJmLOnDnIyclhBTARERFFvYhMAE+ePIlp06bh7Nmz6NatG6699lrs3r0b3bp1AwCUlJTg/PnzuPvuu1FbW4trr70Wb731lr0HIACUlpYiJiYGBQUFTo2giYiIiKKdRVEUJdQXEanq6+uRlJSEuro6TgcTEUUJmw3YsQM4cwbo0QMYOxawWkN9VWQkfn9H6AggERFRIJSXA3PnAidPtj6WkQGsXAnk54fuuoiMFhVFIERERP4qLwemTHFO/gDg1CnxeHl5aK6LKBCYABIRkenZbGLkT2tRlPpYUZGII4oGTACJiMj0duxoO/LnSFGAEydEHFE0YAJIRESmd+aMsXFE4Y4JIBERmV6PHsbGEYU7JoBERGR6Y8eKal+LRft5iwXIzBRxRNGACSAREZme1SpavQBtk0D15xUr2A+QogcTQCIiIog+f6+8Alx+ufPjGRnicfYBpGjCRtBERETfy88HcnO5EwhFPyaAREREDqxWYNy4UF8FUWBxCpiIiIjIZJgAEhEREZkME0AiIiIik2ECSERERGQyTACJiIiITIYJIBEREZHJMAEkIiIiMhkmgEREREQmwwSQiIiIyGSYABIRERGZDBNAIiIiIpNhAkhERERkMkwAiYiIiEyGCSARERGRyTABJCIiIjIZJoBEREREJsMEkIiIiMhkmAASERERmQwTQCIiIiKTYQJIREREZDJMAImIiIhMhgkgERERkckwASQiIiIymYhPAJcsWQKLxYKioiL7YzNmzIDFYnG6TZo0yel1jY2NKCwsREpKCjp37oyCggLU1NQE+eqJiIiIgi+iE8C9e/fi2WefxZAhQ9o8N2nSJJw5c8Z+27Bhg9PzxcXFeOONN7Bp0yZs374dp0+fRn5+frAunYiIiChkIjYBbGhowJ133ok///nP6Nq1a5vn4+LikJaWZr85xtTV1eH555/H8uXLceONN2L48OFYu3Ytdu7cid27dwfzbRAREREFXcQmgIWFhbj55psxYcIEzecrKirQvXt39O/fH/feey/Onj1rf27fvn24dOmS02sHDBiArKws7Nq1y+05m5qaUF9f73QjIiIiijTtQn0Bvti4cSP279+PvXv3aj4/adIk5OfnIzs7G5WVlXjooYcwefJk7Nq1C1arFdXV1YiNjUWXLl2cXpeamorq6mq35128eDEWLlxo5FshIiIiCrqISwBPnDiBuXPn4t1330WHDh00Y6ZOnWr/9+DBgzFkyBD06dMHFRUVGD9+vM/nXrBgAebNm2f/ub6+HpmZmT4fj4iIiCgUIm4KeN++ffjqq68wbNgwtGvXDu3atcP27dvx5JNPol27drDZbG1e07t3b1x22WU4duwYACAtLQ3Nzc2ora11iqupqUFaWprbc8fFxSExMdHpRkRERBRpIi4BHD9+PA4dOoQDBw7Yb9dccw3uvPNOHDhwAFartc1rTp48ibNnz6JHjx4AgOHDh6N9+/bYunWrPebIkSM4fvw4cnJygvZeiIiIiEIh4qaAExIScNVVVzk91qlTJ6SkpOCqq65CQ0MDFi5ciIKCAqSlpaGyshIlJSXo27cvJk6cCABISkrCzJkzMW/ePCQnJyMxMRFz5sxBTk4ORo0aFYq3RURERBQ0EZcAemO1WnHw4EGsX78etbW1SE9Px0033YTf/e53iIuLs8eVlpYiJiYG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Vd1Zuxa46y7v1/M//wP84hfe47xVAXfvDixYILctXnm5mCbXuxPK7NnAU0/pe40nV10FfPqp97hBg7y3uyHyBb+/I7QIhCjSue7GEImb0wfyPejZ8UPPaJKnNXdG9Rmsq5O7Htm46mr3SWBqqnheVn4+kJvb+nv78EPnwg93ZCuwZQV7L2AiaotTwERBVl4O9OolFuXfcYe479VLPB4pAvkempvFyJ8njuvSjOoPaNRxunaVO45sHAD8/Of6HvfEahXNladNE5+jP/sQ+2r0aGPjiEg/JoBEQaRWn7pOwZ06JR6PhCQw0O9Bz0gcYFx/QKOO42kPYF/iPFU+L1smty7RHXUfYk/c7UPsj4EDjY0jIv24BtAPXENAethsYpTM3fortc9csHZj8EUw3sOcOcDTT3uPU9elhdsawHvvBdas8X4999wDrF7tOcaoa/ImL08UubjKzZVraaNXsN4XkTv8/uYIIFHQyO7GsGNH8K5Jr2C8B70jcZ07a7ducTRihHbyZ7OJHnkbNoh9Z73tISwzGiab+MrE6R0N9UV5OfD669rPvf56YEalQzXySEStmAASBUk07H8ajPcwa5b+dWkffeQ+CRwxQjzvSmsd4//+rxj10uozKNsQ2VsyqifOqHWJ7njaI1il7iVstKVLPf/OAtF8mohasQqYKEiiYf9Tf96DbNWwOjrkaccPrdGhjz4S08E/+5n8TiCuic+pU+L28suiQvboUaBfP3Et8fHe3zcAfPutcXFGrUt0R8+I7rhxcseU/T2XlLhfB7l3r3ieSSBRACnks7q6OgWAUldXF+pLoQjw3XeKkpGhKBaLooivVuebxaIomZkiLlz5+h5efVW8zjE2I0M87s78+YpitTq/xmoVjxvxHrSu3/E8eq7V0UsveT62envpJe/Hampqey1a19rU5NtnUVYmd61lZXLHk/09B/p9EXnD729F4RQwUZA47sbgzooV4VsAAnjeUUL92fU9+Fo1rLXjx4ULnkeFHNf0VVRoT116G/VSj6PnWh25bi/nT1yg18oZOSqt5/ccjLWNRORZ0KuAa2tr8dFHH+Grr75CS0uL03M/96WpVQixioh8IbvDRTjT2lEiM1Mkf4775Qaz8lnrmjIyRMLqeE0bNog1f3rJXqu39wyIz0rPew7U34xR16r396y30pvIaPz+RnCngF9//XUlISFB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oMkZlYiNHSvW7KnrBl1ZLGLLubFjfYsnIiIi4zABNDmjEjGrVbRuUV/jegxA7DesFnTojSciIiLjRGQC+Pe//x233nor0tPTYbFYsHnzZqfnFUXBo48+ih49eiA+Ph4TJkzA0aNHnWIaGxtRWFiIlJQUdO7cGQUFBaipqQniuwgPRiZi+fmiYvjyy50fz8jQriTWG09ERETGiMgE8Pz587j66qvxzDPPaD6/dOlSPPnkk1izZg327NmDTp06YeLEiWhsbLTHFBcX44033sCmTZuwfft2nD59GvkmzTiMTMTy84EvvgC2bQPKysR9VZX7Y+iNJyIiIv9FfB9Ai8WC1157DXl5eQDE6F96ejruv/9+PPDAAwCAuro6pKamYt26dZg6dSrq6urQrVs3lJWVYcqUKQCAzz//HAMHDsSuXbswatQoqXNHWx8hbslGRERmEG3f376IyBFAT6qqqlBdXY0JEybYH0tKSsLIkSOxa9cuAMC+fftw6dIlp5gBAwYgKyvLHqOlqakJ9fX1TrdoYrUC48YB06aJeyZ/RERE0SnqEsDq6moAQGpqqtPjqamp9ueqq6sRGxuLLl26uI3RsnjxYiQlJdlvmZmZxl48ERERURBEXQIYSAsWLEBdXZ39duLEiVBfEhEREZFuUZcApqWlAUCbit6amhr7c2lpaWhubkZtba3bGC1xcXFITEx0uhERERFFmqhLALOzs5GWloatW7faH6uvr8eePXuQk5MDABg+fDjat2/vFHPkyBEcP37cHkNEREQUrdqF+gJ80dDQgGPHjtl/rqqqwoEDB5CcnIysrCwUFRVh0aJF6NevH7Kzs/HII48gPT3dXimclJSEmTNnYt68eUhOTkZiYiLmzJmDnJwc6QpgIiIiokgVkQngxx9/jBtuuMH+87x58wAA06dPx7p161BSUoLz58/j7rvvRm1tLa699lq89dZb6NChg/01paWliImJQUFBAZqamjBx4kSsWrUq6O+FiIiIKNgivg9gKLGPEBERUeTh93cUrgEkIiIiIs+YABIRERGZTESuAQwX6ux5tO0IQkREFM3U720zr4JjAuiHc+fOAQB3BCEiIopA586dQ1JSUqgvIyRYBOKHlpYWnD59GgkJCbBYLIYeu76+HpmZmThx4oQpFqia7f0CfM98z9GL75nvOdwpioJz584hPT0dMTHmXA3HEUA/xMTEICMjI6DnMNuOI2Z7vwDfs1nwPZsD33PkMOvIn8qcaS8RERGRiTEBJCIiIjIZJoBhKi4uDo899hji4uJCfSlBYbb3C/A9mwXfsznwPVOkYREIERERkclwBJCIiIjIZJgAEhEREZkME0AiIiIik2ECSERERGQyTADDzN///nfceuutSE9Ph8ViwebNm0N9SQG1ePFijBgxAgkJCejevTvy8vJw5MiRUF9WQK1evRpDhgyxN0/NycnB3/72t1BfVlAtWbIEFosFRUVFob6UgPnNb34Di8XidBswYECoLyvgTp06hZ/+9KdISUlBfHw8Bg8ejI8//jjUlxUwvXr1avN7tlgsKCwsDPWlBYzNZsMjjzyC7OxsxMfHo0+fPvjd735n6n11IxF3Agkz58+fx9VXX4277roL+fn5ob6cgNu+fTsKCwsxYsQIfPfdd3jooYdw00034bPPPkOnTp1CfXkBkZGRgSVLlqBfv35QFAXr169Hbm4u/vGPf2DQoEGhvryA27t3L5599lkMGTIk1JcScIMGDcJ7771n/7ldu+j+v9xvv/0WY8aMwQ033IC//e1v6NatG44ePYquXbuG+tICZu/evbDZbPafDx8+jB/+8If47//+7xBeVWD9/ve/x+rVq7F+/XoMGjQIH3/8MX7xi18gKSkJ9913X6gvjyRF9/8bRaDJkydj8uTJob6MoHnrrbecfl63bh26d++Offv24brrrgvRVQXWrbfe6vTz448/jtWrV2P37t1RnwA2NDTgzjvvxJ///GcsWrQo1JcTcO3atUNaWlqoLyNofv/73yMzMxNr1661P5adnR3CKwq8bt26Of28ZMkS9OnTB9dff32Irijwdu7cidzcXNx8880AxCjohg0b8NFHH4X4ykgPTgFTWKmrqwMAJCcnh/hKgsNms2Hjxo04f/48cnJyQn05AVdYWIibb74ZEyZMCPWlBMXRo0eRnp6O3r17484778Tx48dDfUkB9frrr+Oaa67Bf//3f6N79+4YOnQo/vznP4f6soKmubkZL730Eu666y5YLJZQX07AjB49Glu3bsW//vUvAMAnn3yCDz74wFSDF9GAI4AUNlpaWlBUVIQxY8bgqquuCvXlBNShQ4eQk5ODxsZGdO7cGa+99hquvPLKUF9WQG3cuBH79+/H3r17Q30pQTFy5EisW7cO/fv3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"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 0 Axes>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "#### Creating train and test dataset\nTrain/Test Split involves splitting the dataset into training and testing sets respectively, which are mutually exclusive. After which, you train with the training set and test with the testing set. \nThis will provide a more accurate evaluation on out-of-sample accuracy because the testing dataset is not part of the dataset that have been used to train the model. Therefore, it gives us a better understanding of how well our model generalizes on new data.\n\nWe know the outcome of each data point in the testing dataset, making it great to test with! Since this data has not been used to train the model, the model has no knowledge of the outcome of these data points. So, in essence, it is truly an out-of-sample testing.\n\nLet's split our dataset into train and test sets. Around 80% of the entire dataset will be used for training and 20% for testing. We create a mask to select random rows using the  __np.random.rand()__ function: \n",
      "metadata": {
        "button": false,
        "new_sheet": false,
        "run_control": {
          "read_only": false
        }
      }
    },
    {
      "cell_type": "code",
      "source": "msk = np.random.rand(len(df)) < 0.8\ntrain = cdf[msk]\ntest = cdf[~msk]",
      "metadata": {
        "button": false,
        "new_sheet": false,
        "run_control": {
          "read_only": false
        },
        "trusted": true
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "#### Train data distribution\n",
      "metadata": {
        "button": false,
        "new_sheet": false,
        "run_control": {
          "read_only": false
        }
      }
    },
    {
      "cell_type": "code",
      "source": "plt.scatter(train.ENGINESIZE, train.CO2EMISSIONS,  color='blue')\nplt.xlabel(\"Engine size\")\nplt.ylabel(\"Emission\")\nplt.show()",
      "metadata": {
        "button": false,
        "new_sheet": false,
        "run_control": {
          "read_only": false
        },
        "trusted": true
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<pyolite.display.Image at 0x47710f8>",
            "image/png": ""
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 0 Axes>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<h2 id=\"multiple_regression_model\">Multiple Regression Model</h2>\n",
      "metadata": {
        "button": false,
        "new_sheet": false,
        "run_control": {
          "read_only": false
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": "In reality, there are multiple variables that impact the co2emission. When more than one independent variable is present, the process is called multiple linear regression. An example of multiple linear regression is predicting co2emission using the features FUELCONSUMPTION_COMB, EngineSize and Cylinders of cars. The good thing here is that multiple linear regression model is the extension of the simple linear regression model.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "from sklearn import linear_model\nregr = linear_model.LinearRegression()\nx = np.asanyarray(train[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_COMB']])\ny = np.asanyarray(train[['CO2EMISSIONS']])\nregr.fit (x, y)\n# The coefficients\nprint ('Coefficients: ', regr.coef_)",
      "metadata": {
        "button": false,
        "new_sheet": false,
        "run_control": {
          "read_only": false
        },
        "trusted": true
      },
      "execution_count": 15,
      "outputs": [
        {
          "name": "stdout",
          "text": "Coefficients:  [[ 9.3216615   7.56396652 10.54883964]]\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "As mentioned before, __Coefficient__ and __Intercept__  are the parameters of the fitted line. \nGiven that it is a multiple linear regression model with 3 parameters and that the parameters are the intercept and coefficients of the hyperplane, sklearn can estimate them from our data. Scikit-learn uses plain Ordinary Least Squares method to solve this problem.\n\n#### Ordinary Least Squares (OLS)\nOLS is a method for estimating the unknown parameters in a linear regression model. OLS chooses the parameters of a linear function of a set of explanatory variables by minimizing the sum of the squares of the differences between the target dependent variable and those predicted by the linear function. In other words, it tries to minimizes the sum of squared errors (SSE) or mean squared error (MSE) between the target variable (y) and our predicted output ($\\hat{y}$) over all samples in the dataset.\n\nOLS can find the best parameters using of the following methods:\n* Solving the model parameters analytically using closed-form equations\n* Using an optimization algorithm (Gradient Descent, Stochastic Gradient Descent, Newton’s Method, etc.)\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h2 id=\"prediction\">Prediction</h2>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "y_hat= regr.predict(test[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_COMB']])\nx = np.asanyarray(test[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_COMB']])\ny = np.asanyarray(test[['CO2EMISSIONS']])\nprint(\"Residual sum of squares: %.2f\"\n      % np.mean((y_hat - y) ** 2))\n\n# Explained variance score: 1 is perfect prediction\nprint('Variance score: %.2f' % regr.score(x, y))",
      "metadata": {
        "button": false,
        "new_sheet": false,
        "run_control": {
          "read_only": false
        },
        "trusted": true
      },
      "execution_count": 16,
      "outputs": [
        {
          "name": "stderr",
          "text": "/lib/python3.10/site-packages/sklearn/base.py:443: UserWarning: X has feature names, but LinearRegression was fitted without feature names\n  warnings.warn(\n",
          "output_type": "stream"
        },
        {
          "name": "stdout",
          "text": "Residual sum of squares: 675.45\nVariance score: 0.83\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "__Explained variance regression score:__  \nLet $\\hat{y}$ be the estimated target output, y the corresponding (correct) target output, and Var be the Variance (the square of the standard deviation). Then the explained variance is estimated as follows:\n\n$\\texttt{explainedVariance}(y, \\hat{y}) = 1 - \\frac{Var\\{ y - \\hat{y}\\}}{Var\\{y\\}}$  \nThe best possible score is 1.0, the lower values are worse.\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h2 id=\"practice\">Practice</h2>\nTry to use a multiple linear regression with the same dataset, but this time use FUELCONSUMPTION_CITY and FUELCONSUMPTION_HWY instead of FUELCONSUMPTION_COMB. Does it result in better accuracy?\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# write your code here\nfrom sklearn import linear_model\nregr = linear_model.LinearRegression()\nx = np.asanyarray(train[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_CITY', 'FUELCONSUMPTION_HWY']])\ny = np.asanyarray(train[['CO2EMISSIONS']])\nregr.fit (x, y)\n# The coefficients\nprint ('Coefficients: ', regr.coef_)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 18,
      "outputs": [
        {
          "name": "stdout",
          "text": "Coefficients:  [[9.46770231 7.192564   6.65063429 3.59540085]]\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "y_= regr.predict(test[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_CITY', 'FUELCONSUMPTION_HWY']])\nx = np.asanyarray(test[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_CITY', 'FUELCONSUMPTION_HWY']])\ny = np.asanyarray(test[['CO2EMISSIONS']])\nprint(\"Residual sum of squares: %.2f\"\n      % np.mean((y_ - y) ** 2))\n\n# Explained variance score: 1 is perfect prediction\nprint('Variance score: %.2f' % regr.score(x, y))",
      "metadata": {
        "trusted": true
      },
      "execution_count": 21,
      "outputs": [
        {
          "name": "stderr",
          "text": "/lib/python3.10/site-packages/sklearn/base.py:443: UserWarning: X has feature names, but LinearRegression was fitted without feature names\n  warnings.warn(\n",
          "output_type": "stream"
        },
        {
          "name": "stdout",
          "text": "Residual sum of squares: 673.55\nVariance score: 0.83\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<details><summary>Click here for the solution</summary>\n\n```python\nregr = linear_model.LinearRegression()\nx = np.asanyarray(train[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_CITY','FUELCONSUMPTION_HWY']])\ny = np.asanyarray(train[['CO2EMISSIONS']])\nregr.fit (x, y)\nprint ('Coefficients: ', regr.coef_)\ny_= regr.predict(test[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_CITY','FUELCONSUMPTION_HWY']])\nx = np.asanyarray(test[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_CITY','FUELCONSUMPTION_HWY']])\ny = np.asanyarray(test[['CO2EMISSIONS']])\nprint(\"Residual sum of squares: %.2f\"% np.mean((y_ - y) ** 2))\nprint('Variance score: %.2f' % regr.score(x, y))\n\n```\n\n</details>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h2>Want to learn more?</h2>\n\nIBM SPSS Modeler is a comprehensive analytics platform that has many machine learning algorithms. It has been designed to bring predictive intelligence to decisions made by individuals, by groups, by systems – by your enterprise as a whole. A free trial is available through this course, available here: <a href=\"https://www.ibm.com/analytics/spss-statistics-software?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkML0101ENSkillsNetwork1047-2023-01-01\">SPSS Modeler</a>\n\nAlso, you can use Watson Studio to run these notebooks faster with bigger datasets. Watson Studio is IBM's leading cloud solution for data scientists, built by data scientists. With Jupyter notebooks, RStudio, Apache Spark and popular libraries pre-packaged in the cloud, Watson Studio enables data scientists to collaborate on their projects without having to install anything. Join the fast-growing community of Watson Studio users today with a free account at <a href=\"https://www.ibm.com/cloud/watson-studio?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkML0101ENSkillsNetwork1047-2023-01-01\">Watson Studio</a>\n\n",
      "metadata": {
        "button": false,
        "new_sheet": false,
        "run_control": {
          "read_only": false
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": "### Thank you for completing this lab!\n\n\n## Author\n\nSaeed Aghabozorgi\n\n\n### Other Contributors\n\n<a href=\"https://www.linkedin.com/in/joseph-s-50398b136/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkML0101ENSkillsNetwork1047-2023-01-01\">Joseph Santarcangelo</a>\n\n\n\n\n## Change Log\n\n\n|  Date (YYYY-MM-DD) |  Version | Changed By  |  Change Description |\n|---|---|---|---|\n| 2020-11-03  | 2.1  | Lakshmi  | Made changes in URL |\n| 2020-08-27  | 2.0  | Lavanya  |  Moved lab to course repo in GitLab |\n|   |   |   |   |\n|   |   |   |   |\n\n\n## <h3 align=\"center\"> © IBM Corporation 2020. All rights reserved. <h3/>\n",
      "metadata": {}
    }
  ]
}